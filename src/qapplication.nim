##  Copyright (C) 2016 The Qt Company Ltd.
##  SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only

## !!!Ignored construct:  # QAPPLICATION_H [NewLine] # QAPPLICATION_H [NewLine] # < QtWidgets / qtwidgetsglobal . h > [NewLine] # < QtCore / qcoreapplication . h > [NewLine] # < QtGui / qwindowdefs . h > [NewLine] # < QtCore / qpoint . h > [NewLine] # < QtCore / qsize . h > [NewLine] # < QtGui / qcursor . h > [NewLine] # < QtGui / qguiapplication . h > [NewLine] QT_BEGIN_NAMESPACE class QStyle ;
## Error: token expected: ; but got: [identifier]!!!

discard "forward decl of QEventLoop"
discard "forward decl of QIcon"
discard "forward decl of QLocale"
discard "forward decl of QPlatformNativeInterface"
discard "forward decl of QApplication"
discard "forward decl of QApplicationPrivate"
when defined(qApp):
  discard
const
  qApp* = (static_cast[ptr QApplication](instance()))

## !!!Ignored construct:  class Q_WIDGETS_EXPORT QApplication : public QGuiApplication { Q_OBJECT Q_PROPERTY ( int cursorFlashTime READ cursorFlashTime WRITE setCursorFlashTime ) Q_PROPERTY ( int doubleClickInterval READ doubleClickInterval WRITE setDoubleClickInterval ) Q_PROPERTY ( int keyboardInputInterval READ keyboardInputInterval WRITE setKeyboardInputInterval ) # QT_CONFIG ( wheelevent ) [NewLine] Q_PROPERTY ( int wheelScrollLines READ wheelScrollLines WRITE setWheelScrollLines ) # [NewLine] Q_PROPERTY ( int startDragTime READ startDragTime WRITE setStartDragTime ) Q_PROPERTY ( int startDragDistance READ startDragDistance WRITE setStartDragDistance ) # QT_NO_STYLE_STYLESHEET [NewLine] Q_PROPERTY ( QString styleSheet READ styleSheet WRITE setStyleSheet ) # [NewLine] Q_PROPERTY ( bool autoSipEnabled READ autoSipEnabled WRITE setAutoSipEnabled ) public : # Q_QDOC [NewLine] QApplication ( int & argc , char * * argv ) ; # [NewLine] QApplication ( int & argc , char * * argv , int = ApplicationFlags ) ; # [NewLine] virtual ~ QApplication ( ) ; static QStyle * style ( ) ; static void setStyle ( QStyle * ) ; static QStyle * setStyle ( const QString & ) ; using QGuiApplication :: palette ; static QPalette palette ( const QWidget * ) ; static QPalette palette ( const char * className ) ; static void setPalette ( const QPalette & , const char * className = nullptr ) ; static QFont font ( ) ; static QFont font ( const QWidget * ) ; static QFont font ( const char * className ) ; static void setFont ( const QFont & , const char * className = nullptr ) ; # QT_DEPRECATED_SINCE ( 6 , 0 ) [NewLine] QT_DEPRECATED_VERSION_X_6_0 ( Use the QFontMetricsF constructor instead. ) static QFontMetrics fontMetrics ( ) ; # [NewLine] static QWidgetList allWidgets ( ) ; static QWidgetList topLevelWidgets ( ) ; static QWidget * activePopupWidget ( ) ; static QWidget * activeModalWidget ( ) ; static QWidget * focusWidget ( ) ; static QWidget * activeWindow ( ) ; static void setActiveWindow ( QWidget * act ) ; static QWidget * widgetAt ( const QPoint & p ) ; static inline QWidget * widgetAt ( int x , int y ) { return widgetAt ( QPoint ( x , y ) ) ; } static QWidget * topLevelAt ( const QPoint & p ) ; static inline QWidget * topLevelAt ( int x , int y ) { return topLevelAt ( QPoint ( x , y ) ) ; } static void beep ( ) ; static void alert ( QWidget * widget , int duration = 0 ) ; static void setCursorFlashTime ( int ) ; static int cursorFlashTime ( ) ; static void setDoubleClickInterval ( int ) ; static int doubleClickInterval ( ) ; static void setKeyboardInputInterval ( int ) ; static int keyboardInputInterval ( ) ; # QT_CONFIG ( wheelevent ) [NewLine] static void setWheelScrollLines ( int ) ; static int wheelScrollLines ( ) ; # [NewLine] static void setStartDragTime ( int ms ) ; static int startDragTime ( ) ; static void setStartDragDistance ( int l ) ; static int startDragDistance ( ) ; static bool isEffectEnabled ( Qt :: UIEffect ) ; static void setEffectEnabled ( Qt :: UIEffect , bool enable = true ) ; static int exec ( ) ; bool notify ( QObject * , QEvent * ) override ; # QT_KEYPAD_NAVIGATION [NewLine] static void setNavigationMode ( Qt :: NavigationMode mode ) ; static Qt :: NavigationMode navigationMode ( ) ; # [NewLine] QT_DECLARE_NATIVE_INTERFACE_ACCESSOR ( QApplication ) Q_SIGNALS : void focusChanged ( QWidget * old , QWidget * now ) ; public : QString styleSheet ( ) const ; public Q_SLOTS : # QT_NO_STYLE_STYLESHEET [NewLine] void setStyleSheet ( const QString & sheet ) ; # [NewLine] void setAutoSipEnabled ( const bool enabled ) ; bool autoSipEnabled ( ) const ; static void closeAllWindows ( ) ; static void aboutQt ( ) ; protected : bool event ( QEvent * ) override ; bool compressEvent ( QEvent * , QObject * receiver , QPostEventList * ) override ; private : Q_DISABLE_COPY ( QApplication ) Q_DECLARE_PRIVATE ( QApplication ) friend class QGraphicsWidget ; friend class QGraphicsItem ; friend class QGraphicsScene ; friend class QGraphicsScenePrivate ; friend class QWidget ; friend class QWidgetPrivate ; friend class QWidgetWindow ; friend class QTranslator ; friend class QWidgetAnimator ; # QT_NO_SHORTCUT [NewLine] friend class QShortcut ; friend class QLineEdit ; friend class QWidgetTextControl ; # [NewLine] friend class QAction ; # QT_NO_GESTURES [NewLine] friend class QGestureManager ; # [NewLine] } ;
## Error: token expected: ; but got: [identifier]!!!

## !!!Ignored construct:  QT_END_NAMESPACE #  QAPPLICATION_H
## Error: expected ';'!!!
